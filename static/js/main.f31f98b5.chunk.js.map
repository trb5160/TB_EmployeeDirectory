{"version":3,"sources":["components/Employees.js","components/Search.js","utils/API.js","components/Directory.js","App.js","reportWebVitals.js","index.js"],"names":["Employees","props","dateOfBirth","date","dateArray","split","year","join","formatDate","dob","className","alt","firstName","src","icon","lastName","email","phone","address","Search","placeholder","name","type","onChange","event","startSort","axios","get","Directory","state","employees","empSort","search","sorted","componentDidMount","API","then","results","setState","data","sortEmp","filter","first","toLowerCase","includes","last","target","value","render","label","map","employee","picture","medium","location","street","number","id","city","postcode","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"yQAkCeA,EAhCG,SAACC,GAcjB,IAAIC,EAXJ,SAAoBC,GAClB,IAAMC,EAAYD,EAAKE,MAAM,KACvBC,EAAOF,EAAU,GAKvB,MADsB,CAHRA,EAAU,GACPA,EAAU,GAAGC,MAAM,KACf,GACcC,GAAMC,KAAK,KAK9BC,CAAWP,EAAMQ,KAEnC,OACE,qBAAIC,UAAU,KAAd,UACE,6BACE,qBAAKC,IAAKV,EAAMW,UAAWC,IAAKZ,EAAMa,SAExC,+BACGb,EAAMW,UADT,IACqBX,EAAMc,YAE3B,6BAAKd,EAAMe,QACX,+BAAKf,EAAMgB,MAAX,OACA,6BAAKf,IACL,6BAAKD,EAAMiB,cCXFC,EAhBA,SAAClB,GACd,OACE,qBAAKS,UAAU,wCAAf,SACE,+BACE,uBACEU,YAAY,SACZC,KAAK,SACLC,KAAK,OACLZ,UAAU,sCACVa,SAAU,SAACC,GAAD,OAAWvB,EAAMwB,UAAUD,W,iBCThC,EAEH,WACR,OAAOE,IAAMC,IAAI,kDCiHNC,G,kNA/GbC,MAAQ,CACNC,UAAW,GACXC,QAAS,GACTC,OAAQ,GACRC,QAAQ,G,EAKVC,kBAAoB,WAClBC,IAAeC,MAAK,SAACC,GACnB,EAAKC,SAAS,CACZR,UAAWO,EAAQE,KAAKF,c,EAO9BG,QAAU,WACR,MAA4B,EAAKX,MAA3BC,EAAN,EAAMA,UAAWE,EAAjB,EAAiBA,OACbD,EAAUD,EAAUW,QAAO,SAACR,GAC9B,OACEA,EAAOZ,KAAKqB,MAAMC,cAAcC,SAASZ,EAAOW,gBAChDV,EAAOZ,KAAKwB,KAAKF,cAAcC,SAASZ,EAAOW,gBAC/CV,EAAOjB,MAAM2B,cAAcC,SAASZ,EAAOW,kBAG/C,EAAKL,SAAS,CAAEP,a,EAIlBN,UAAY,SAACD,GACX,EAAKc,SAAS,CAAEN,OAAQR,EAAMsB,OAAOC,QAAS,WAC5C,EAAKP,UACL,EAAKF,SAAS,CAAEL,QAAQ,Q,EAI5Be,OAAS,WACP,OACE,sBAAKtC,UAAU,aAAf,UACE,sBAAKA,UAAU,4BAAf,UACE,oBAAIA,UAAU,YAAd,gCACA,+FACA,cAAC,EAAD,CAAQW,KAAK,SAASI,UAAW,EAAKA,UAAWwB,MAAM,cAGzD,qBAAKvC,UAAU,kBAAf,SACE,wBAAOA,UAAU,4EAAjB,UACE,uBAAOA,UAAU,QAAjB,SACE,+BACE,uCACA,sCACA,uCACA,uCACA,+CACA,8CAGJ,gCAGK,EAAKmB,MAAMI,OAwBR,EAAKJ,MAAME,QAAQmB,KAAI,SAACC,GAAD,OACrB,cAAC,EAAD,CAEEvC,UAAWuC,EAAS9B,KAAKqB,MACzB3B,SAAUoC,EAAS9B,KAAKwB,KACxB5B,MAAOkC,EAASlC,MAChBD,MAAOmC,EAASnC,MAChBF,KAAMqC,EAASC,QAAQC,OACvB5C,IAAK0C,EAAS1C,IAAIN,KAClBe,QACEiC,EAASG,SAASC,OAAOC,OACzBL,EAASG,SAASC,OAAOlC,MATtB8B,EAASM,GAAGV,UAzBrB,EAAKlB,MAAMC,UAAUoB,KAAI,SAACC,GAAD,OACvB,cAAC,EAAD,CAEEvC,UAAWuC,EAAS9B,KAAKqB,MACzB3B,SAAUoC,EAAS9B,KAAKwB,KACxB5B,MAAOkC,EAASlC,MAChBD,MAAOmC,EAASnC,MAChBF,KAAMqC,EAASC,QAAQC,OACvB5C,IAAK0C,EAAS1C,IAAIN,KAClBe,QACEiC,EAASG,SAASC,OAAOC,OACzB,IACAL,EAASG,SAASC,OAAOlC,KACzB,KACA8B,EAASG,SAASI,KAClB,KACAP,EAASG,SAASzB,MAClB,IACAsB,EAASG,SAASK,UAhBfR,EAASM,GAAGV,qB,YAnEjBa,cCMTC,G,MARH,WACV,OACE,qBAAKnD,UAAU,MAAf,SACE,cAAC,EAAD,QCKSoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAAStB,OACP,cAAC,IAAMuB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.f31f98b5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Employees = (props) => {\r\n  // The API response of dates looks like: 1972-08-30T05:36:46.599Z\r\n  // That's difficult to read, so formatDate sets up dates as ??-??-???? in Month-Day-Year format.\r\n  function formatDate(date) {\r\n    const dateArray = date.split(\"-\");\r\n    const year = dateArray[0];\r\n    const month = dateArray[1];\r\n    const dayArray = dateArray[2].split(\"T\");\r\n    const day = dayArray[0];\r\n    const formattedDate = [month, day, year].join(\"-\");\r\n    return formattedDate;\r\n  }\r\n\r\n  // dateOfBirth variable allows me to cleanly call formatDate on the props in the below JSX\r\n  let dateOfBirth = formatDate(props.dob);\r\n\r\n  return (\r\n    <tr className=\"tr\">\r\n      <td>\r\n        <img alt={props.firstName} src={props.icon} />\r\n      </td>\r\n      <td>\r\n        {props.firstName} {props.lastName}\r\n      </td>\r\n      <td>{props.email}</td>\r\n      <td>{props.phone} </td>\r\n      <td>{dateOfBirth}</td>\r\n      <td>{props.address}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Employees;","import React from \"react\";\r\n\r\nconst Search = (props) => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center mx-auto\">\r\n      <form>\r\n        <input\r\n          placeholder=\"Search\"\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control-lg search-font mx-auto\"\r\n          onChange={(event) => props.startSort(event)}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;","import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  },\r\n};","import React, { Component } from \"react\";\r\nimport Employees from \"./Employees.js\";\r\nimport Search from \"./Search.js\";\r\nimport API from \"../utils/API\";\r\nimport \"../styles/Directory.css\";\r\n\r\nclass Directory extends Component {\r\n  state = {\r\n    employees: [],\r\n    empSort: [],\r\n    search: \"\",\r\n    sorted: false,\r\n  };\r\n\r\n  // check that the component rendered at least once, and pull in our data\r\n  // wait for the information to come back\r\n  componentDidMount = () => {\r\n    API.getUsers().then((results) => {\r\n      this.setState({\r\n        employees: results.data.results,\r\n      });\r\n    });\r\n  };\r\n\r\n  // sort through employees based on search term\r\n  // check if there is a match and set that to empSort for rendering\r\n  sortEmp = () => {\r\n    let { employees, search } = this.state;\r\n    let empSort = employees.filter((sorted) => {\r\n      return (\r\n        sorted.name.first.toLowerCase().includes(search.toLowerCase()) ||\r\n        sorted.name.last.toLowerCase().includes(search.toLowerCase()) ||\r\n        sorted.email.toLowerCase().includes(search.toLowerCase())\r\n      );\r\n    });\r\n    this.setState({ empSort });\r\n  };\r\n\r\n  // grab search term, activate sorted\r\n  startSort = (event) => {\r\n    this.setState({ search: event.target.value }, () => {\r\n      this.sortEmp();\r\n      this.setState({ sorted: true });\r\n    });\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"background\">\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n          <h2 className=\"display-4\">Employee Directory</h2>\r\n          <p> Search for an employee by entering their name or email below.</p>\r\n          <Search name=\"search\" startSort={this.startSort} label=\"Search\" />\r\n        </div>\r\n\r\n        <div className=\"container-fluid\">\r\n          <table className=\"table table-dark table-striped table-hover table-bordered table-condensed\">\r\n            <thead className=\"thead\">\r\n              <tr>\r\n                <th>Image</th>\r\n                <th>Name</th>\r\n                <th>Email</th>\r\n                <th>Phone</th>\r\n                <th>Date of Birth</th>\r\n                <th>Address</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                // If user has not entered any search input, sort employees by UUID\r\n                !this.state.sorted\r\n                  ? this.state.employees.map((employee) => (\r\n                      <Employees\r\n                        key={employee.id.value}\r\n                        firstName={employee.name.first}\r\n                        lastName={employee.name.last}\r\n                        phone={employee.phone}\r\n                        email={employee.email}\r\n                        icon={employee.picture.medium}\r\n                        dob={employee.dob.date}\r\n                        address={\r\n                          employee.location.street.number +\r\n                          \" \" +\r\n                          employee.location.street.name +\r\n                          \", \" +\r\n                          employee.location.city +\r\n                          \", \" +\r\n                          employee.location.state +\r\n                          \" \" +\r\n                          employee.location.postcode\r\n                        }\r\n                      />\r\n                    ))\r\n                  : // sort users by UUID if the user has entered a search\r\n                    this.state.empSort.map((employee) => (\r\n                      <Employees\r\n                        key={employee.id.value}\r\n                        firstName={employee.name.first}\r\n                        lastName={employee.name.last}\r\n                        phone={employee.phone}\r\n                        email={employee.email}\r\n                        icon={employee.picture.medium}\r\n                        dob={employee.dob.date}\r\n                        address={\r\n                          employee.location.street.number +\r\n                          employee.location.street.name\r\n                        }\r\n                      />\r\n                    ))\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Directory;","import React from \"react\";\nimport Directory from \"./components/Directory.js\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Directory />\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}